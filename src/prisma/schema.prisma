generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  legalName    String?
  contactEmail String?
  branding     Json?
  settings     Json?

  stores       Store[]
  warehouses   Warehouse[]
  users        User[]
  customers    Customer[]
  transactions Transaction[]
  payments     Payment[]
  inventories  Inventory[]
  stocks       Stock[]
  posSessions  POSSession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  BusinessEntity BusinessEntity[]

  b2bConnectionsA B2BConnection[] @relation("b2bA")

  b2bConnectionsB B2BConnection[] @relation("b2bB")

  Supplier Supplier[]

  ProductSupplier ProductSupplier[]

  PurchaseOrder PurchaseOrder[]

  UserRole UserRole[]

  ActivityLog ActivityLog[]

  Notification Notification[]

  CommunicationLog CommunicationLog[]

  Role Role[]

  AuditLog AuditLog[]

  StockTransferDestination StockTransfer[] @relation("TransferDestTenant")

  StockTransferSource StockTransfer[] @relation("TransferSourceTenant")

  Invoice Invoice[]

  POSCashDrop POSCashDrop[]

  POSReconciliation POSReconciliation[]

  POSSalesReturn POSSalesReturn[]
}

model BusinessEntity {
  id           String   @id @default(cuid())
  tenantId     String
  name         String
  taxId        String?
  legalAddress String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant  @relation(fields: [tenantId], references: [id])
  stores Store[]
}

model GlobalCategory {
  id          String          @id @default(cuid())
  name        String
  imageUrl    String?
  parentId    String?
  description String?
  products    GlobalProduct[]

  parent        GlobalCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories GlobalCategory[] @relation("CategoryHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model GlobalProduct {
  id               String    @id @default(cuid())
  globalCategoryId String
  sku              String    @unique
  name             String
  barcode          String? // UPC/EAN code
  imageUrl         String? // image link for UI
  brand            String? // manufacturer/brand
  dosageForm       String?
  strength         String?
  sellingType      String? // online, store(POS), etc.
  description      String?
  isPrescription   Boolean   @default(false)
  isActive         Boolean   @default(true)
  deletedAt        DateTime? // soft‐delete
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  category        GlobalCategory         @relation(fields: [globalCategoryId], references: [id])
  variants        GlobalVariant[]    
  tenantOverrides TenantProduct[] // tenant‐scoped overrides

  // cross‐module relations
  B2BConnection      B2BConnection[]     @relation("GlobalProductB2B")
  ProductSupplier    ProductSupplier[] // which suppliers supply this global SKU
  stocks             Stock[] // stock entries across tenants
  stockTransfers     StockTransfer[] // all transfer records involving this product
  purchaseOrderItems PurchaseOrderItem[] // PO line items

  @@unique([sku], map: "GlobalProduct_sku_unique")
}

model VariantAttributes {
  id              String   @id @default(cuid())
  name            String
  options          String[]
  isActive        Boolean?  @default(true)

  GlobalVariant GlobalVariant[]

  TenantVariant TenantVariant[]
}

model GlobalVariant {
  id              String   @id @default(cuid())
  globalProductId String
  variantAttributes VariantAttributes[]
  name            String
  sku             String
  imageUrl        String?
  costPrice       Decimal
  sellingPrice    Decimal
  stock           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product GlobalProduct @relation(fields: [globalProductId], references: [id])

  @@unique([globalProductId, sku])
}

model TenantProduct {
  id               String    @id @default(cuid())
  tenantId         String
  globalProductId  String? // null for tenant‐only
  tenantCategoryId String?
  sku              String? // optional override
  name             String? // optional override
  barcode          String? // tenant‐specific if needed
  imageUrl         String?
  brand            String?
  description      String?
  isTransferable   Boolean   @default(false)
  isActive         Boolean   @default(true)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  category      TenantCategory?        @relation(fields: [tenantCategoryId], references: [id])
  globalProduct GlobalProduct?         @relation(fields: [globalProductId], references: [id])
  variants      TenantVariant[]

  // cross‐module relations
  productSuppliers      ProductSupplier[] @relation("TenantProductToSupplier") // supplier links for this tenant product
  stocks               Stock[] // stock at tenant’s stores/warehouses
  stockTransfers       StockTransfer[] // transfers involving this tenant’s product
  purchaseOrderItems   PurchaseOrderItem[] // PO line items for this tenant product
  Inventory            Inventory[]
  StockTransferProduct StockTransfer[]     @relation("TransferSourceProduct")
  StockTransfer        StockTransfer[]     @relation("TransferDestProduct")

  @@unique([tenantId, sku])
  ProductSupplier ProductSupplier[]
}

model TenantCategory {
  id          String          @id @default(cuid())
  tenantId    String
  name        String
  parentId    String?
  description String?
  imageUrl    String?
  products    TenantProduct[]

  parent        TenantCategory?  @relation("TenantCategoryHierarchy", fields: [parentId], references: [id])
  subcategories TenantCategory[] @relation("TenantCategoryHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name])
}

model TenantVariant {
  id              String   @id @default(cuid())
  tenantProductId String
  variantAttributes VariantAttributes[]
  name            String
  sku             String
  imageUrl        String?
  costPrice       Decimal
  sellingPrice    Decimal
  stock           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenantProduct            TenantProduct   @relation(fields: [tenantProductId], references: [id])
  Stock                    Stock[]
  Inventory                Inventory[]
  StockTransferSource      StockTransfer[] @relation("TransferSourceVariant")
  StockTransferDestination StockTransfer[] @relation("TransferDestVariant")

  @@unique([tenantProductId, sku])
  PurchaseOrderItem PurchaseOrderItem[]
}

model Store {
  id           String        @id @default(cuid())
  tenantId     String
  name         String
  address      String?
  phone        String?
  email        String?
  type         String // "wholesale" | "retail" | "clinic" | "warehouse" etc.
  status       String // "active" | "inactive" | "under_maintenance" etc.
  isMain       Boolean       @default(false)
  managerId    String?
  openingHours Json? // [{ day: "Mon", open: "08:00", close: "18:00" }, ...]
  branding     Json?
  settings     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  inventories  Inventory[]
  stocks       Stock[]
  posSessions  POSSession[]
  transactions Transaction[]

  BusinessEntity BusinessEntity[]

  PurchaseOrder PurchaseOrder[]

  ActivityLog ActivityLog[]

  stockTransfersFrom StockTransfer[] @relation("stockTransferFrom")

  stockTransfersTo StockTransfer[] @relation("stockTransferTo")

  User User[]

  StockTransferSource StockTransfer[] @relation("TransferFromStore")

  StockTransferDestination StockTransfer[] @relation("TransferToStore")
}

model Warehouse {
  id          String      @id @default(cuid())
  tenantId    String
  name        String
  address     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  inventories Inventory[]
  stocks      Stock[]

  PurchaseOrder PurchaseOrder[]

  Transaction Transaction[]

  stockTransfersFrom StockTransfer[] @relation("stockTransferFromWarehouse")
  stockTransfersTo   StockTransfer[] @relation("stockTransferToWarehouse")

  StockTransferWarehouseSource StockTransfer[] @relation("TransferFromWarehouse")

  StockTransferWarehouseDest StockTransfer[] @relation("TransferToWarehouse")
}

model Inventory {
  id                     String    @id @default(cuid())
  tenantId               String
  tenantProductId        String
  tenantProductVariantId String?
  batchNumber            String?
  quantity               Decimal   @default(0)
  costPrice              Decimal?
  expiryDate             DateTime?
  movementType           String
  reference              String?
  storeId                String?
  warehouseId            String?
  reason                 String?
  temperature            Float?
  isControlled           Boolean   @default(false)
  requiresRefrigeration  Boolean   @default(false)
  metadata               Json?
  createdById            String?
  verifiedById           String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  voided Boolean @default(false)

  tenant        Tenant                @relation(fields: [tenantId], references: [id])
  tenantProduct TenantProduct         @relation(fields: [tenantProductId], references: [id])
  tenantVariant TenantVariant? @relation(fields: [tenantProductVariantId], references: [id])
  store         Store?                @relation(fields: [storeId], references: [id])
  warehouse     Warehouse?            @relation(fields: [warehouseId], references: [id])
  createdBy     User?                 @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  verifiedBy    User?                 @relation("InventoryVerifiedBy", fields: [verifiedById], references: [id])
  B2BConnection B2BConnection[]

  @@unique([tenantId, tenantProductId, tenantProductVariantId, batchNumber, storeId, warehouseId])
  @@index([tenantId])
  @@index([tenantProductId])
  @@index([batchNumber])
  @@index([expiryDate])
  @@index([storeId])
  @@index([warehouseId])
  @@index([movementType])
  @@index([isControlled])
}

model Stock {
  id                     String    @id @default(cuid())
  tenantId               String
  tenantProductId        String
  tenantProductVariantId String? // optional
  storeId                String?
  warehouseId            String?
  quantity               Int
  minStockLevel          Int?
  maxStockLevel          Int?
  reorderPoint           Int?
  reference              String?
  movementType           String
  reason                 String?
  batchNumber            String?
  expiryDate             DateTime?
  updatedAt              DateTime  @updatedAt

  tenant        Tenant                @relation(fields: [tenantId], references: [id])
  tenantProduct TenantProduct         @relation(fields: [tenantProductId], references: [id])
  tenantVariant TenantVariant? @relation(fields: [tenantProductVariantId], references: [id])
  store         Store?                @relation(fields: [storeId], references: [id])
  warehouse     Warehouse?            @relation(fields: [warehouseId], references: [id])

  StockTransfer     StockTransfer[] // back-ref
  PurchaseOrderItem PurchaseOrderItem[] // back-ref
  GlobalProduct     GlobalProduct[]

  @@unique([tenantId, tenantProductId, storeId, warehouseId])
}

model Transaction {
  id              String      @id @default(cuid())
  tenantId        String
  storeId         String?
  warehouseId     String?
  userId          String?
  customerId      String?
  amount          Float
  discount        Float?
  taxAmount       Float?
  referenceType   String    // e.g. "purchaseOrder", "posTransaction", "stockTransfer", "b2bConnection"
  referenceId     String? 
  shippingFee     Float?
  shippingType    String?
  shippingAddress String?
  metadata        Json?
  paymentMethod   String // Last payment method used
  paymentStatus   String // e.g. "paid", "pending", "refunded"
  status          String // e.g. "completed", "cancelled", "returned"
  posSessionId    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  store           Store?      @relation(fields: [storeId], references: [id])
  warehouse       Warehouse?  @relation(fields: [warehouseId], references: [id])
  user            User?       @relation(fields: [userId], references: [id])
  customer        Customer?   @relation(fields: [customerId], references: [id])
  posSession      POSSession? @relation(fields: [posSessionId], references: [id])
  payments        Payment[]


  TransactionItem TransactionItem[] @relation("TransactionItemTransaction")

  Payment Payment[] @relation("PaymentTransaction")

  POSSalesReturn POSSalesReturn[]

  Refund Refund[]
}

model Payment {
  id              String         @id @default(cuid())
  tenantId        String
  amount          Float
  method          String // "cash", "card", "transfer", "wallet", etc.
  reference       String?
  status          String // "pending", "completed", "failed",  "refunded" etc.
  transactionId   String? // Sales transaction (POS)
  purchaseOrderId String? // Purchase order payment
  sessionId       String? // POSSession if relevant
  userId          String?
  paymentDate     DateTime? // When payment was confirmed/received
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tenant          Tenant         @relation(fields: [tenantId], references: [id])
  transaction     Transaction?   @relation("PaymentTransaction", fields: [transactionId], references: [id])
  purchaseOrder   PurchaseOrder? @relation("PaymentPurchaseOrder", fields: [purchaseOrderId], references: [id])
  user            User?          @relation("PaymentUser", fields: [userId], references: [id])
  posSession      POSSession?    @relation("PaymentSession", fields: [sessionId], references: [id])

  Supplier Supplier[] @relation("SupplierPayments")

  Customer Customer[] @relation("CustomerPayments")

  Transaction Transaction[]

  PurchaseOrder PurchaseOrder[]

  Invoice Invoice[] @relation("InvoicePayments")
}

model POSSession {
  id             String         @id @default(cuid())
  tenantId       String
  storeId        String
  userId         String         // who opened the session
  openedBy       String         // alias for userId, clearer intent
  closedBy       String?        // new
  openingBalance Float          // cash float at start
  closingBalance Float?         // final cash recorded
  isOpen         Boolean        @default(true)
  openedAt       DateTime       @default(now())
  closedAt       DateTime?
  notes          String?        // added field

  tenant         Tenant         @relation(fields: [tenantId], references: [id])
  store          Store          @relation(fields: [storeId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  transactions   Transaction[]
  salesReturns   POSSalesReturn[]
  cashDrops      POSCashDrop[]
  reconciliations POSReconciliation[]
  payments       Payment[]      @relation("PaymentSession")

  @@index([tenantId])
  @@index([storeId])
  @@index([userId])
  @@index([isOpen])
}

model POSCashDrop {
  id        String   @id @default(cuid())
  tenantId  String
  sessionId String
  userId    String
  amount    Float
  reason    String
  createdAt DateTime @default(now())

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  session   POSSession @relation(fields: [sessionId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@index([sessionId])
}

model POSReconciliation {
  id           String   @id @default(cuid())
  tenantId     String
  sessionId    String
  userId       String
  expectedCash Float
  actualCash   Float
  variance     Float
  notes        String?
  createdAt    DateTime @default(now())

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  session   POSSession @relation(fields: [sessionId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@index([sessionId])
}


model POSSalesReturn {
  id          String   @id @default(cuid())
  tenantId    String
  sessionId   String
  userId      String
  transactionId String
  reason      String?
  createdAt   DateTime @default(now())

  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  session     POSSession @relation(fields: [sessionId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([sessionId])
}

model Customer {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  email         String?
  phone         String?
  loyaltyNumber String?
  segment       String? // e.g., "wholesaler", "retailer", "corporate", "sales rep", "clinic", "hospital", etc.
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  transactions      Transaction[]
  payments          Payment[]          @relation("CustomerPayments")
  communicationLogs CommunicationLog[]

  Invoice Invoice[]
}

model B2BConnection {
  id        String   @id @default(cuid())
  tenantAId String
  tenantBId String
  status    String // pending, approved, rejected, revoked
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantA        Tenant          @relation("b2bA", fields: [tenantAId], references: [id])
  tenantB        Tenant          @relation("b2bB", fields: [tenantBId], references: [id])
  // Optionally, reference PurchaseOrders or Inventory if B2B includes cross-tenant procurement
  purchaseOrders PurchaseOrder[]
  inventories    Inventory[]

  StockTransfer StockTransfer[]

  GlobalProduct GlobalProduct[] @relation("GlobalProductB2B")
}

model Supplier {
  id                 String   @id @default(cuid())
  tenantId           String
  name               String
  email              String?
  phone              String?
  address            String?
  leadTime           Int?
  performanceMetrics Json? // BI: delivery, returns, etc.
  paymentTerms       String?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  products          ProductSupplier[]
  purchaseOrders    PurchaseOrder[]
  payments          Payment[]          @relation("SupplierPayments")
  communicationLogs CommunicationLog[]
}

model ProductSupplier {
  id              String   @id @default(cuid())
  tenantId        String
  tenantProductId String?   // if linking a tenant’s own product
  globalProductId String?   // if linking a shared/global product
  supplierId      String
  price           Float
  leadTime        Int?
  isGlobal        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])


   // explicit relations
  tenantProduct  TenantProduct? @relation(fields: [tenantProductId], references: [id])
  globalProduct  GlobalProduct? @relation(fields: [globalProductId], references: [id])

 

  TenantProduct TenantProduct[] @relation("TenantProductToSupplier")
}

model PurchaseOrder {
  id           String               @id @default(cuid())
  tenantId     String
  supplierId   String
  storeId      String? 
  warehouseId  String?
  status       String               // pending, approved, received, cancelled
  orderDate    DateTime
  receivedDate DateTime?
  totalAmount  Float
  notes        String?
  createdById  String?
  updatedById  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  tenant       Tenant               @relation(fields:[tenantId], references:[id])
  supplier     Supplier             @relation(fields:[supplierId], references:[id])
  store        Store?               @relation(fields:[storeId], references:[id])
  warehouse    Warehouse?           @relation(fields:[warehouseId], references:[id])
  createdBy    User?                @relation("poCreatedBy", fields:[createdById], references:[id])
  updatedBy    User?                @relation("poUpdatedBy", fields:[updatedById], references:[id])
  items        PurchaseOrderItem[]
  payments     Payment[]

  @@index([tenantId])
  Payment Payment[] @relation("PaymentPurchaseOrder")
  B2BConnection B2BConnection[]
}

model PurchaseOrderItem {
  id                         String                @id @default(cuid())
  purchaseOrderId            String
  tenantProductId            String
  tenantProductVariantId     String?
  quantity                   Int
  costPrice                  Float
  batchNumber                String?
  expiryDate                 DateTime?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt

  purchaseOrder              PurchaseOrder         @relation(fields:[purchaseOrderId], references:[id])
  tenantProduct              TenantProduct         @relation(fields:[tenantProductId], references:[id])
  tenantVariant              TenantVariant? @relation(fields:[tenantProductVariantId], references:[id])

  @@index([purchaseOrderId])
  Stock Stock[]
  GlobalProduct GlobalProduct[]
}

model StockTransfer {
  id                           String    @id @default(cuid())
  tenantId                     String
  sourceTenantProductId        String
  sourceTenantProductVariantId String?
  fromStoreId                  String?
  fromWarehouseId              String?
  destTenantId                 String
  destTenantProductId          String
  destTenantProductVariantId   String?
  toStoreId                    String?
  toWarehouseId                String?
  quantity                     Int
  status                       String // pending, approved, rejected, cancelled
  batchNumber                  String?
  expiryDate                   DateTime?
  createdById                  String?
  approvedById                 String?
  transferType                 String?   @default("intra-tenant") // or enum
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  sourceProduct           TenantProduct         @relation("TransferSourceProduct", fields: [sourceTenantProductId], references: [id])
  sourceVariant           TenantVariant? @relation("TransferSourceVariant", fields: [sourceTenantProductVariantId], references: [id])
  fromStore               Store?                @relation("TransferFromStore", fields: [fromStoreId], references: [id])
  fromWarehouse           Warehouse?            @relation("TransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  destTenant              Tenant                @relation("TransferDestTenant", fields: [destTenantId], references: [id])
  destProduct             TenantProduct         @relation("TransferDestProduct", fields: [destTenantProductId], references: [id])
  destVariant             TenantVariant? @relation("TransferDestVariant", fields: [destTenantProductVariantId], references: [id])
  toStore                 Store?                @relation("TransferToStore", fields: [toStoreId], references: [id])
  toWarehouse             Warehouse?            @relation("TransferToWarehouse", fields: [toWarehouseId], references: [id])
  createdBy               User?                 @relation("TransferCreatedBy", fields: [createdById], references: [id])
  approvedBy              User?                 @relation("TransferApprovedBy", fields: [approvedById], references: [id])
  stockTransfersRequester User[]                @relation("RequestedByUser")
  stockTransfersApprover  User[]                @relation("ApprovedByUser")
  B2BConnection           B2BConnection[]
  GlobalProduct           GlobalProduct[]
  SourceStore             Store[]               @relation("stockTransferFrom")
  Store                   Store[]               @relation("stockTransferTo")
  TenantProduct           TenantProduct[]
  StockFromWarehouse      Warehouse[]           @relation("stockTransferFromWarehouse")
  StockToWarehouse        Warehouse[]           @relation("stockTransferToWarehouse")
  Stock                   Stock[]
  Tenant                  Tenant[]              @relation("TransferSourceTenant")

  @@index([tenantId])
  @@index([sourceTenantProductId])
  @@index([destTenantProductId])
}

model TransactionItem {
  id               String    @id @default(cuid())
  transactionId    String
  productId        String
  productVariantId String?
  quantity         Int
  price            Float
  discount         Float?
  batchNumber      String?
  expiryDate       DateTime?

  transaction Transaction @relation("TransactionItemTransaction", fields: [transactionId], references: [id])
}

model Invoice {
  id            String      @id @default(cuid())
  tenantId      String
  customerId    String?     // links to CRM.Customer
  referenceType String      // e.g. "purchaseOrder", "posTransaction", "stockTransfer"
  referenceId   String?     // id of that document
  invoiceNo     String      @unique
  issueDate     DateTime    @default(now())
  dueDate       DateTime?
  status        String      // draft, issued, paid, partiallyPaid, overdue, cancelled
  subTotal      Float
  taxTotal      Float
  totalAmount   Float
  metadata      Json?
  createdById   String?
  updatedById   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tenant        Tenant      @relation(fields: [tenantId],     references: [id])
  customer      Customer?   @relation(fields: [customerId],   references: [id])
  createdBy     User?       @relation("invoiceCreatedBy",    fields: [createdById], references: [id])
  updatedBy     User?       @relation("invoiceUpdatedBy",    fields: [updatedById], references: [id])
  items         InvoiceItem[]
  payments      Payment[]   @relation("InvoicePayments")
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  productId   String    // TenantProduct
  variantId   String?   // TenantProductVariant
  description String
  quantity    Int
  unitPrice   Float
  taxAmount   Float
  lineTotal   Float

  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
}


model Refund {
  id              String   @id @default(cuid())
  transactionId   String
  refundItems     Json     // [{ productId, quantity, reason }]
  totalRefund     Float
  tenantId        String
  userId          String?
  refundMethod    String?  // cash, reversal, credit, etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transaction     Transaction @relation(fields: [transactionId], references: [id])
}


model CommunicationLog {
  tenantId   String
  id         String   @id @default(cuid())
  customerId String?
  supplierId String?
  userId     String? // staff who initiated
  method     String // "call", "email", "sms", "whatsapp", etc.
  content    String
  direction  String // "inbound", "outbound"
  timestamp  DateTime @default(now())

  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  supplier Supplier? @relation(fields: [supplierId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  storeId   String?
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  store     Store?   @relation(fields: [storeId], references: [id])

  // Auth/Password reset/invite
  passwordResetToken   String?        @unique
  passwordResetExpires DateTime?
  inviteToken          String?        @unique
  inviteExpires        DateTime?
  refreshTokens        RefreshToken[]
  roles                UserRole[]
  posSessions          POSSession[]
  transactions         Transaction[]

  ActivityLog ActivityLog[]

  Notification Notification[]

  CommunicationLog CommunicationLog[]

  stockTransfersRequester StockTransfer[] @relation("RequestedByUser")

  stockTransfersApproved StockTransfer[] @relation("ApprovedByUser")

  AuditLog AuditLog[]

  // Relations to Inventory
  createdInventories  Inventory[]   @relation("InventoryCreatedBy")
  verifiedInventories Inventory[]   @relation("InventoryVerifiedBy")

  Payment             Payment[]     @relation("PaymentUser")

  StockTransferCreator StockTransfer[] @relation("TransferCreatedBy")

  StockTransferApprover StockTransfer[] @relation("TransferApprovedBy")

  PurchaseOrder PurchaseOrder[]     @relation("poCreatedBy")

  PurchaseOrderUpdate PurchaseOrder[]     @relation("poUpdatedBy")

  InvoiceCreatedBy Invoice[] @relation("invoiceCreatedBy")

  InvoiceUpdatedBy Invoice[] @relation("invoiceUpdatedBy")

  POSCashDrop POSCashDrop[]

  POSReconciliation POSReconciliation[]

  POSSalesReturn POSSalesReturn[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserRole {
  id         String    @id @default(cuid())
  tenantId   String
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime? // Optional expiration

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId, tenantId])
}

model Role {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  context     String? // tenant, store, warehouse, etc.
  isSystem    Boolean  @default(false) // System roles can't be modified
  parentId    String? // New: For role hierarchy
  warehouseId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent      Role?        @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    Role[]       @relation("RoleHierarchy")
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  permissions Permission[] @relation("RolePermissions")
  userRoles   UserRole[]

  @@unique([name, context])
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  roles       Role[]  @relation("RolePermissions")
}


model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String
  userId     String? // who performed the action
  action     String // e.g., "PAYMENT_REVERSAL", "REFUND"
  entityType String // "Payment", "Transaction", etc.
  entityId   String // id of the Payment or Transaction
  details    Json? // any extra info (amount, reason, etc)
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  storeId   String?
  action    String
  details   Json?
  timestamp DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  store  Store? @relation(fields: [storeId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String?
  type      String // info, warning, error, success
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])
}
