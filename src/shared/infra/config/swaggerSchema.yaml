# --- Product Schemas ---
CreateProductDto:
  type: object
  required:
    - name
    - sku
    - tenantId
    - costPrice
    - sellingPrice
  properties:
    tenantId:
      type: string
      description: Tenant ID
    categoryId:
      type: string
      description: Category ID (optional)
    name:
      type: string
      minLength: 2
      example: "Paracetamol 500mg"
    sku:
      type: string
      minLength: 2
      example: "PARA-500"
    barcode:
      type: string
      example: "123456789012"
    description:
      type: string
      example: "Pain reliever and fever reducer"
    brand:
      type: string
      example: "Generic"
    costPrice:
      type: number
      minimum: 0
      example: 5.99
    sellingPrice:
      type: number
      minimum: 0
      example: 9.99
    isActive:
      type: boolean
      default: true
    dosageForm:
      type: string
      example: "tablet"
    strength:
      type: string
      example: "500mg"
    variants:
      type: array
      items:
        $ref: '#/components/schemas/CreateProductVariantDto'

Product:
  allOf:
    - $ref: '#/components/schemas/CreateProductDto'
    - type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/ProductCategory'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'

ProductVariant:
  type: object
  properties:
    id:
      type: string
    name:
      type: string
      example: "100 tablets bottle"
    sku:
      type: string
      example: "PARA-500-100TAB"
    costPrice:
      type: number
    sellingPrice:
      type: number
    isActive:
      type: boolean
    productId:
      type: string
    createdAt:
      type: string
      format: date-time

CreateProductVariantDto:
  type: object
  required:
    - name
    - costPrice
    - sellingPrice
    - productId
  properties:
    name:
      type: string
    sku:
      type: string
    costPrice:
      type: number
    sellingPrice:
      type: number
    stock:
      type: number
    productId:
      type: string

ProductCategory:
  type: object
  properties:
    id:
      type: string
    name:
      type: string
      example: "Analgesics"
    description:
      type: string
      example: "Pain relief medications"
    createdAt:
      type: string
      format: date-time

Pagination:
  type: object
  properties:
    total:
      type: integer
    page:
      type: integer
    limit:
      type: integer
    totalPages:
      type: integer

# --- Product Paths ---

/product-categories:
  get:
    tags: [ProductCategories]
    summary: List all product categories
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductCategory'
  post:
    tags: [ProductCategories]
    summary: Create a product category
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductCategory'
    responses:
      201:
        description: Created

/product-categories/{id}:
  get:
    tags: [ProductCategories]
    summary: Get a product category by ID
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
  patch:
    tags: [ProductCategories]
    summary: Update a product category
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductCategory'
    responses:
      200:
        description: Updated
  delete:
    tags: [ProductCategories]
    summary: Delete a product category
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Deleted

/products:
  get:
    tags: [Products]
    summary: List all products with optional filters
    parameters:
      - name: search
        in: query
        schema:
          type: string
      - name: categoryId
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
      - name: limit
        in: query
        schema:
          type: integer
    responses:
      200:
        description: List of products
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
                pagination:
                  $ref: '#/components/schemas/Pagination'
  post:
    tags: [Products]
    summary: Create a product
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProductDto'
    responses:
      201:
        description: Created

/products/{id}:
  get:
    tags: [Products]
    summary: Get product by ID
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Product found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
  patch:
    tags: [Products]
    summary: Update a product
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProductDto'
    responses:
      200:
        description: Updated
  delete:
    tags: [Products]
    summary: Delete a product
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Deleted

/product-variants:
  post:
    tags: [ProductVariants]
    summary: Create a product variant
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProductVariantDto'
    responses:
      201:
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'

/product-variants/{id}:
  patch:
    tags: [ProductVariants]
    summary: Update a product variant
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProductVariantDto'
    responses:
      200:
        description: Updated
  delete:
    tags: [ProductVariants]
    summary: Delete a product variant
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Deleted

/product-variants/product/{productId}:
  get:
    tags: [ProductVariants]
    summary: List variants for a given product
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: List of variants
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductVariant'


# --- Inventory Schemas ---
InventoryMovementDto:
  type: object
  required:
    - tenantId
    - userId
    - productId
    - quantity
    - movementType
  properties:
    tenantId:
      type: string
    userId:
      type: string
    productId:
      type: string
    variantId:
      type: string
    batchNumber:
      type: string
    quantity:
      type: number
    movementType:
      type: string
      enum:
        - purchase
        - sale
        - adjustment
        - return
        - transfer
        - donation
        - compounding
        - waste
        - discrepancy
    source:
      type: object
      properties:
        type:
          type: string
          enum: [store, warehouse, clinic]
        id:
          type: string
    destination:
      type: object
      properties:
        type:
          type: string
          enum: [store, warehouse, clinic]
        id:
          type: string
    reference:
      type: string
    costPrice:
      type: number
    expiryDate:
      type: string
      format: date-time
    metadata:
      type: object
      additionalProperties: true

InventoryResponseDto:
  type: object
  properties:
    id:
      type: string
    tenantId:
      type: string
    product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sku:
          type: string
    variant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sku:
          type: string
    location:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        name:
          type: string
    batchNumber:
      type: string
    quantity:
      type: number
    costPrice:
      type: number
    expiryDate:
      type: string
      format: date-time
    movementType:
      type: string
    reference:
      type: string
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

      # --- Inventory Paths ---
/inventory:
  post:
    tags: [Inventory]
    summary: Record a new inventory movement
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoryMovementDto'
    responses:
      201:
        description: Movement recorded

  get:
    tags: [Inventory]
    summary: List inventory movements
    parameters:
      - name: productId
        in: query
        schema:
          type: string
      - name: movementType
        in: query
        schema:
          type: string
      - name: storeId
        in: query
        schema:
          type: string
    responses:
      200:
        description: List of movements
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InventoryResponseDto'

/inventory/{id}:
  get:
    tags: [Inventory]
    summary: Get inventory movement by ID
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryResponseDto'

  patch:
    tags: [Inventory]
    summary: Update an inventory movement
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoryMovementDto'
    responses:
      200:
        description: Updated

  delete:
    tags: [Inventory]
    summary: Delete an inventory record
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Deleted

# --- Stock Schemas ---
StockDto:
  type: object
  properties:
    id:
      type: string
    tenantId:
      type: string
    productId:
      type: string
    variantId:
      type: string
    storeId:
      type: string
    warehouseId:
      type: string
    quantity:
      type: integer
    minStockLevel:
      type: integer
    maxStockLevel:
      type: integer
    reorderPoint:
      type: integer
    batchNumber:
      type: string
    expiryDate:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time


# --- Stock Paths ---
/stocks:
  get:
    tags: [Stock]
    summary: Get stock levels
    parameters:
      - name: productId
        in: query
        schema:
          type: string
      - name: storeId
        in: query
        schema:
          type: string
      - name: warehouseId
        in: query
        schema:
          type: string
    responses:
      200:
        description: List of stock levels
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockDto'

/stocks/{productId}:
  get:
    tags: [Stock]
    summary: Get stock detail by product ID
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Stock found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockDto'

  delete:
    tags: [Stock]
    summary: Delete stock entry
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Deleted

/stocks/adjust:
  post:
    tags: [Stock]
    summary: Adjust stock level
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StockDto'
    responses:
      200:
        description: Stock adjusted

/stocks/increment:
  post:
    tags: [Stock]
    summary: Increment stock quantity
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StockDto'
    responses:
      200:
        description: Stock incremented


# --- Stock Transfer Schemas ---
StockTransferItem:
  type: object
  properties:
    productId:
      type: string
    quantity:
      type: number
    batchNumber:
      type: string
    expiryDate:
      type: string
      format: date-time

CreateStockTransferDto:
  type: object
  required:
    - tenantId
    - productId
    - quantity
    - transferType
    - requestedBy
  properties:
    tenantId:
      type: string
    fromStoreId:
      type: string
    fromWarehouseId:
      type: string
    toTenantId:
      type: string
    toStoreId:
      type: string
    toWarehouseId:
      type: string
    productId:
      type: string
    quantity:
      type: number
    transferType:
      type: string
      enum: [intra-tenant, cross-tenant]
    b2bConnectionId:
      type: string
    requestedBy:
      type: string
    notes:
      type: string
    batchNumber:
      type: string
    expiryDate:
      type: string
      format: date-time

StockTransferResponse:
  type: object
  properties:
    id:
      type: string
    tenantId:
      type: string
    fromStore:
      $ref: '#/components/schemas/LocationReference'
    fromWarehouse:
      $ref: '#/components/schemas/LocationReference'
    toTenant:
      $ref: '#/components/schemas/TenantReference'
    toStore:
      $ref: '#/components/schemas/LocationReference'
    toWarehouse:
      $ref: '#/components/schemas/LocationReference'
    product:
      $ref: '#/components/schemas/ProductReference'
    quantity:
      type: number
    transferType:
      type: string
    b2bConnection:
      $ref: '#/components/schemas/B2BConnectionReference'
    requestedBy:
      $ref: '#/components/schemas/UserReference'
    approvedBy:
      $ref: '#/components/schemas/UserReference'
    notes:
      type: string
    status:
      type: string
      enum: [pending, approved, completed, rejected, cancelled]
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

PaginatedStockTransfers:
  type: object
  properties:
    data:
      type: array
      items:
        $ref: '#/components/schemas/StockTransferResponse'
    pagination:
      $ref: '#/components/schemas/Pagination'

# --- Purchase Order Schemas ---
PurchaseOrderItem:
  type: object
  properties:
    id:
      type: string
    productId:
      type: string
    productName:
      type: string
    productSku:
      type: string
    quantity:
      type: number
    costPrice:
      type: number
    batchNumber:
      type: string
    expiryDate:
      type: string
      format: date-time
    isControlled:
      type: boolean

PurchaseOrderPayment:
  type: object
  properties:
    id:
      type: string
    amount:
      type: number
    method:
      type: string
    status:
      type: string
    paidAt:
      type: string
      format: date-time

PurchaseOrderResponse:
  type: object
  properties:
    id:
      type: string
    tenantId:
      type: string
    supplier:
      $ref: '#/components/schemas/SupplierReference'
    store:
      $ref: '#/components/schemas/LocationReference'
    warehouse:
      $ref: '#/components/schemas/LocationReference'
    orderDate:
      type: string
      format: date-time
    receivedDate:
      type: string
      format: date-time
    status:
      type: string
      enum: [pending, approved, received, cancelled]
    totalAmount:
      type: number
    paidAmount:
      type: number
    balance:
      type: number
    notes:
      type: string
    items:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseOrderItem'
    payments:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseOrderPayment'
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

PaginatedPurchaseOrders:
  type: object
  properties:
    data:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseOrderResponse'
    pagination:
      $ref: '#/components/schemas/Pagination'

# --- Reference Schemas ---
LocationReference:
  type: object
  properties:
    id:
      type: string
    name:
      type: string

TenantReference:
  type: object
  properties:
    id:
      type: string
    name:
      type: string

UserReference:
  type: object
  properties:
    id:
      type: string
    name:
      type: string

ProductReference:
  type: object
  properties:
    id:
      type: string
    name:
      type: string
    sku:
      type: string
    isControlled:
      type: boolean

B2BConnectionReference:
  type: object
  properties:
    id:
      type: string
    status:
      type: string

SupplierReference:
  type: object
  properties:
    id:
      type: string
    name:
      type: string

# --- Stock Transfer Paths ---
/stock-transfers:
  post:
    tags: [StockTransfer]
    summary: Create a new stock transfer request
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateStockTransferDto'
    responses:
      201:
        description: Stock transfer created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      400:
        description: Validation error
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

  get:
    tags: [StockTransfer]
    summary: List stock transfers with filtering
    security:
      - bearerAuth: []
    parameters:
      - name: tenantId
        in: query
        schema:
          type: string
      - name: toTenantId
        in: query
        schema:
          type: string
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, approved, completed, rejected, cancelled]
      - name: storeId
        in: query
        schema:
          type: string
      - name: warehouseId
        in: query
        schema:
          type: string
      - name: productId
        in: query
        schema:
          type: string
      - name: transferType
        in: query
        schema:
          type: string
          enum: [intra-tenant, cross-tenant]
      - name: requestedBy
        in: query
        schema:
          type: string
      - name: approvedBy
        in: query
        schema:
          type: string
      - name: fromDate
        in: query
        schema:
          type: string
          format: date-time
      - name: toDate
        in: query
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
          maximum: 100
    responses:
      200:
        description: List of stock transfers
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedStockTransfers'
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

/stock-transfers/controlled:
  post:
    tags: [StockTransfer]
    summary: Create a controlled substance transfer (additional validations)
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateStockTransferDto'
    responses:
      201:
        description: Controlled substance transfer created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      400:
        description: Validation error or missing required fields for controlled substances
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

/stock-transfers/{transferId}/approve:
  post:
    tags: [StockTransfer]
    summary: Approve a stock transfer
    security:
      - bearerAuth: []
    parameters:
      - name: transferId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              approvedBy:
                type: string
              notes:
                type: string
    responses:
      200:
        description: Transfer approved and completed
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      400:
        description: Validation error or transfer not pending
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Transfer not found

/stock-transfers/{transferId}/reject:
  post:
    tags: [StockTransfer]
    summary: Reject a stock transfer
    security:
      - bearerAuth: []
    parameters:
      - name: transferId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              rejectedBy:
                type: string
              notes:
                type: string
    responses:
      200:
        description: Transfer rejected
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      400:
        description: Validation error or transfer not pending
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Transfer not found

/stock-transfers/{transferId}/cancel:
  post:
    tags: [StockTransfer]
    summary: Cancel a stock transfer
    security:
      - bearerAuth: []
    parameters:
      - name: transferId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              cancelledBy:
                type: string
              notes:
                type: string
    responses:
      200:
        description: Transfer cancelled
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      400:
        description: Validation error or transfer not pending
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Transfer not found

/stock-transfers/{transferId}:
  get:
    tags: [StockTransfer]
    summary: Get a stock transfer by ID
    security:
      - bearerAuth: []
    parameters:
      - name: transferId
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Stock transfer details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/StockTransferResponse'
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Transfer not found

  delete:
    tags: [StockTransfer]
    summary: Delete a stock transfer
    security:
      - bearerAuth: []
    parameters:
      - name: transferId
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Transfer deleted
      400:
        description: Cannot delete completed transfer
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Transfer not found

# --- Purchase Order Paths ---
/purchase-orders:
  post:
    tags: [PurchaseOrder]
    summary: Create a new purchase order
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrderDto'
    responses:
      201:
        description: Purchase order created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

  get:
    tags: [PurchaseOrder]
    summary: List purchase orders with filtering
    security:
      - bearerAuth: []
    parameters:
      - name: supplierId
        in: query
        schema:
          type: string
      - name: status
        in: query
        schema:
          type: string
          enum: [pending, approved, received, cancelled]
      - name: storeId
        in: query
        schema:
          type: string
      - name: warehouseId
        in: query
        schema:
          type: string
      - name: productId
        in: query
        schema:
          type: string
      - name: fromDate
        in: query
        schema:
          type: string
          format: date-time
      - name: toDate
        in: query
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
          maximum: 100
    responses:
      200:
        description: List of purchase orders
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedPurchaseOrders'
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

/purchase-orders/controlled:
  post:
    tags: [PurchaseOrder]
    summary: Create a controlled substance purchase order (additional validations)
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePurchaseOrderDto'
    responses:
      201:
        description: Controlled substance purchase order created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error or missing required fields for controlled substances
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)

/purchase-orders/{id}:
  get:
    tags: [PurchaseOrder]
    summary: Get a purchase order by ID
    security:
      - bearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Purchase order details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Purchase order not found

  put:
    tags: [PurchaseOrder]
    summary: Update a purchase order
    security:
      - bearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePurchaseOrderDto'
    responses:
      200:
        description: Purchase order updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error or cannot update received/cancelled PO
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Purchase order not found

/purchase-orders/{id}/cancel:
  post:
    tags: [PurchaseOrder]
    summary: Cancel a purchase order
    security:
      - bearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              cancelledBy:
                type: string
              reason:
                type: string
    responses:
      200:
        description: Purchase order cancelled
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error or cannot cancel received PO
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Purchase order not found

/purchase-orders/{id}/receive:
  post:
    tags: [PurchaseOrder]
    summary: Receive a purchase order (update inventory/stock)
    security:
      - bearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Purchase order received and inventory updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error or PO already received/cancelled
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Purchase order not found

/purchase-orders/{id}/link-payment:
  post:
    tags: [PurchaseOrder]
    summary: Link a payment to a purchase order
    security:
      - bearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              paymentId:
                type: string
              amount:
                type: number
    responses:
      200:
        description: Payment linked to purchase order
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                data:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
      400:
        description: Validation error or payment already linked
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permissions)
      404:
        description: Purchase order or payment not found


# --- Audit Schemas ---
AuditLogCreateParams:
  type: object
  required:
    - tenantId
    - userId
    - action
    - module
  properties:
    tenantId:
      type: string
    userId:
      type: string
    action:
      type: string
      enum: [create, update, delete, adjust, transfer, verify, login, logout, error]
    module:
      type: string
      example: inventory
    targetId:
      type: string
      nullable: true
    targetRef:
      type: string
      nullable: true
    ipAddress:
      type: string
    userAgent:
      type: string
    description:
      type: string
    metadata:
      type: object

AuditLog:
  type: object
  properties:
    id:
      type: string
    tenantId:
      type: string
    userId:
      type: string
    action:
      type: string
    module:
      type: string
    targetId:
      type: string
      nullable: true
    targetRef:
      type: string
      nullable: true
    ipAddress:
      type: string
    userAgent:
      type: string
    description:
      type: string
    metadata:
      type: object
    createdAt:
      type: string
      format: date-time

AuditLogList:
  type: object
  properties:
    data:
      type: array
      items:
        $ref: '#/components/schemas/AuditLog'
    pagination:
      $ref: '#/components/schemas/Pagination'

  POSSessionSummary:
    type: object
    properties:
      sessionId:
        type: string
      openedBy:
        type: string
      openedAt:
        type: string
        format: date-time
      closedAt:
        type: string
        format: date-time
        nullable: true
      totalSales:
        type: number
        format: float
      totalPayments:
        type: number
        format: float
      totalReturns:
        type: number
        format: float
      totalCashDrops:
        type: number
        format: float
      totalReconciled:
        type: number
        format: float
  paths:
    /pos/sessions/{sessionId}/summary:
    get:
      tags: [POS]
      summary: Get daily POS session summary (sales, returns, cash)
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Summary data for session
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/POSSessionSummary'
        404:
          description: POS session not Found
          
# ---- Tenant Schemas ---
  Tenant:
      type: object
      required:
        - name
        - slug
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        legalName:
          type: string
        contactEmail:
          type: string
        branding:
          type: object
        settings:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BusinessEntity:
      type: object
      required:
        - tenantId
        - name
      properties:
        id:
          type: string
        tenantId:
          type: string
        name:
          type: string
        taxId:
          type: string
        legalAddress:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Store:
      type: object
      required:
        - tenantId
        - businessEntityId
        - name
        - code
      properties:
        id:
          type: string
        tenantId:
          type: string
        businessEntityId:
          type: string
        name:
          type: string
        code:
          type: string
        address:
          type: string
        phone:
          type: string
        type:
          type: string
        status:
          type: string
        isMain:
          type: boolean
        managerId:
          type: string
        openingHours:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

tags:
  - name: Tenant
    description: Tenant management endpoints
  - name: BusinessEntity
    description: Business entity endpoints
  - name: Store
    description: Store endpoints

paths:
  /tenants/onboard:
    post:
      summary: Atomic tenant onboarding (tenant, business entity, store, admin user)
      tags: [Tenant]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  $ref: '#/components/schemas/Tenant'
                businessEntity:
                  $ref: '#/components/schemas/BusinessEntity'
                store:
                  $ref: '#/components/schemas/Store'
                adminUser:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
      responses:
        201:
          description: Onboarding completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenant:
                    $ref: '#/components/schemas/Tenant'
                  businessEntity:
                    $ref: '#/components/schemas/BusinessEntity'
                  store:
                    $ref: '#/components/schemas/Store'
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      name: { type: string }
                      email: { type: string }
        400:
          description: Validation or onboarding error

  /tenants:
    get:
      summary: Get all tenants (admin only)
      tags: [Tenant]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        403:
          description: Forbidden

  /tenants/{id}:
    get:
      summary: Get tenant by ID
      tags: [Tenant]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Tenant ID
      responses:
        200:
          description: Tenant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        404:
          description: Not found
    put:
      summary: Update tenant by ID
      tags: [Tenant]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Tenant ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        200:
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          description: Validation error
        403:
          description: Forbidden


# --- Business Entity ----

  /business-entities:
    post:
      summary: Create a business entity
      tags: [BusinessEntity]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessEntity'
      responses:
        201:
          description: Business entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessEntity'
        400:
          description: Validation error
        403:
          description: Forbidden
    get:
      summary: Get all business entities for a tenant
      tags: [BusinessEntity]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: tenantId
          schema:
            type: string
          required: true
          description: Tenant ID
      responses:
        200:
          description: List of business entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessEntity'
        403:
          description: Forbidden

  /business-entities/{id}:
    get:
      summary: Get business entity by ID
      tags: [BusinessEntity]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Business entity ID
      responses:
        200:
          description: Business entity found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessEntity'
        404:
          description: Not found
        403:
          description: Forbidden
    put:
      summary: Update business entity by ID
      tags: [BusinessEntity]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Business entity ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessEntity'
      responses:
        200:
          description: Business entity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessEntity'
        400:
          description: Validation error
        403:
          description: Forbidden

#---Store Schemas---
  /stores:
    post:
      summary: Create a store
      tags: [Store]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        201:
          description: Store created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        400:
          description: Validation error
        403:
          description: Forbidden
    get:
      summary: Get all stores for a tenant
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: tenantId
          schema:
            type: string
          required: true
          description: Tenant ID
      responses:
        200:
          description: List of stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        403:
          description: Forbidden

  /stores/{id}:
    get:
      summary: Get store by ID
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Store ID
      responses:
        200:
          description: Store found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        404:
          description: Not found
        403:
          description: Forbidden
    put:
      summary: Update store by ID
      tags: [Store]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Store ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        200:
          description: Store updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        400:
          description: Validation error
        403:
          description: Forbidden